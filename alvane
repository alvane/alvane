#!/bin/bash
#
# Copyright (c) 2018 Robert San <robertsanseries@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

#--------------------------------------------------------------------------
# Define Globally Used Variables
#--------------------------------------------------------------------------

# Reset
    Color_Off='\033[0m'       # Text Reset

# Regular Colors
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White

# Break line
    Break='\n'


#--------------------------------------------------------------------------
# Display initial tool context
#--------------------------------------------------------------------------
function main() 
{
    printf "$Green Alvane$Color_Off Framework$Yellow 0.1.0$Color_Off $Break"
    printf "$Break"
    printf "$Yellow Usage:$Color_Off $Break"
    printf "   command [options] [arguments] $Break"
    printf "$Break"
    printf "$Yellow Options:$Color_Off $Break"
    printf "$Green   -v, --version$Color_Off Display this application version $Break"
    printf "$Break"
    
    printf "$Yellow Available commands:$Color_Off $Break"   
    printf "$Yellow  app$Color_Off $Break"
    printf "$Green   app:compile$Color_Off         Compiled App $Break"
    printf "$Green   app:clear-compiled$Color_Off  Removes the build folder $Break"
    printf "$Green   app:git-recreate$Color_Off    Remove folder .git and run git init $Break"
    printf "$Green   app:install$Color_Off         Install App $Break"
    #printf "$Green   app:install-run$Color_Off     Remove the compiled class file $Break"
    #printf "$Green   app:namespace$Color_Off       Set the application default namespace $Break"
    #printf "$Green   app:rdnn$Color_Off            Set the default RDNN used by the application $Break"
    #printf "$Green   app:run$Color_Off             Remove the compiled class file $Break"

    printf "$Yellow  make$Color_Off $Break"
    #printf "$Green   make:config$Color_Off         Create a cache file for faster configuration loading $Break"
    #printf "$Green   make:controller$Color_Off     Create a new controller class $Break"
    #printf "$Green   make:custom$Color_Off         Create a new widget class $Break"
    #printf "$Green   make:enum$Color_Off           Adds required packages to your composer.json and installs them $Break"
    #printf "$Green   make:model$Color_Off          Adds required packages to your composer.json and installs them $Break"
    #printf "$Green   make:object$Color_Off         Create a new model class $Break"
    #printf "$Green   make:util$Color_Off           Create a new model class $Break"
    #printf "$Green   make:view$Color_Off           Create a new view class $Break"
    #printf "$Green   make:widget$Color_Off         Create a new widget class $Break"
    printf "$Break"
}


#--------------------------------------------------------------------------
# Framework Version
#--------------------------------------------------------------------------
function version() 
{
    printf "$Green Alvane$Color_Off Framework$Yellow 0.1.0$Color_Off $Break"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function app_compile() 
{
    meson build && cd build && meson configure -Dprefix=/usr && ninja
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function app_clear_compiled() 
{
    rm -rf build/
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function app_install() 
{
    cd build && sudo ninja install
}

#--------------------------------------------------------------------------
# Delete folde .git and run git init
#--------------------------------------------------------------------------
function app_git_recreate() 
{
    rm -rf .git && git init
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function app_rdnn() 
{
    rm -rf .git && git init
}


#--------------------------------------------------------------------------
# Run The Alvane Application
#--------------------------------------------------------------------------

# Store the number of parameters
number_parameters=$#

# Save parameters
parameters=$@

if [ "$number_parameters" -gt 0 ] 
then
    case $1 in 
        'app:compile')
            app_compile
            ;;
        'app:clear-compiled')
            app_clear_compiled
            ;;
        'app:git-recreate')
            app_git_recreate
            ;;
        'app:install')
            app_install
            ;;
        'app:install-run')
            app_install_run
            ;;
        'app:namespace')
            app_namespace
            ;;
        'app:rdnn')
            app_rdnn
            ;;
        'app:run')
            app_run
            ;;

        'make:config')
            make_config  "$parameters"
            ;;
        'make:controller')
            make_controller  "$parameters"
            ;;
        'make:custom')
            make_custom  "$parameters"
            ;;
        'make:enum')
            make_enum  "$parameters"
            ;;
        'make:model')
            make_model  "$parameters"
            ;;
        'make:object')
            make_object  "$parameters"
            ;;
        'make:util')
            make_util  "$parameters"
            ;;
        'make:view')
            make_view  "$parameters"
            ;;
        'make:widget')
            make_widget "$parameters"
            ;;
        
        '--version')
            version
            ;;
        '-v')
            version
            ;;
    esac
else
    main
fi