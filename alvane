#!/bin/bash
#
# Copyright (c) 2018 Robert San <robertsanseries@gmail.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

#--------------------------------------------------------------------------
# Define Globally Used Variables
#--------------------------------------------------------------------------

# Reset
    Color_Off='\033[0m'       # Text Reset

# Regular Colors
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White

    Black_bg='\033[0;40m'        # Black
    Red_bg='\033[0;41m'          # Red
    Green_bg='\033[0;42m'        # Green
    Yellow_bg='\033[0;43m'       # Yellow
    Blue_bg='\033[0;44m'         # Blue
    Purple_bg='\033[0;45m'       # Purple
    Cyan_bg='\033[0;46m'         # Cyan
    White_bg='\033[0;47m'        # White

# Break line
    Break='\n'


#--------------------------------------------------------------------------
# Display initial tool context
#--------------------------------------------------------------------------
function main() 
{
    printf "$Green Alvane$Color_Off Framework$Yellow 0.1.0$Color_Off $Break"
    printf "$Break"
    printf "$Yellow Usage:$Color_Off $Break"
    printf "   command [options] [arguments] $Break"
    printf "$Break"
    printf "$Yellow Options:$Color_Off $Break"
    printf "$Green   -v, --version$Color_Off Display this application version $Break"
    printf "$Break"
    
    printf "$Yellow Available commands:$Color_Off $Break"   
    printf "$Green   compile$Color_Off          Compiled App $Break"
    printf "$Green   clear-compiled$Color_Off   Remove the build folder $Break"
    printf "$Green   install$Color_Off          Install App $Break"
    
    printf "$Yellow  git$Color_Off $Break"
    printf "$Green   git:restart$Color_Off      Remove folder .git and run git init $Break"

    printf "$Yellow  config$Color_Off $Break"  
    #printf "$Green   config:all$Color_Off       Set the default RDNN used by the application $Break"
    printf "$Green   config:name-app$Color_Off  Set the application name $Break"
    #printf "$Green   config:descricao$Color_Off Set the default RDNN used by the application $Break"
    printf "$Green   config:rdnn$Color_Off      Set the default RDNN used by the application $Break"
    #printf "$Green   config:license$Color_Off   Set the default RDNN used by the application $Break"

    #printf "$Yellow  make$Color_Off $Break"
    #printf "$Green   make:config$Color_Off         Create a cache file for faster configuration loading $Break"
    #printf "$Green   make:controller$Color_Off     Create a new controller class $Break"
    #printf "$Green   make:custom$Color_Off         Create a new widget class $Break"
    #printf "$Green   make:enum$Color_Off           Adds required packages to your composer.json and installs them $Break"
    #printf "$Green   make:model$Color_Off          Adds required packages to your composer.json and installs them $Break"
    #printf "$Green   make:object$Color_Off         Create a new model class $Break"
    #printf "$Green   make:util$Color_Off           Create a new model class $Break"
    #printf "$Green   make:view$Color_Off           Create a new view class $Break"
    #printf "$Green   make:widget$Color_Off         Create a new widget class $Break"
    #printf "$Break"
}


#--------------------------------------------------------------------------
# Framework Version
#--------------------------------------------------------------------------
function version() 
{
    printf "$Green Alvane$Color_Off Framework$Yellow 0.1.0$Color_Off $Break"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function compile() 
{
    meson build && cd build && meson configure -Dprefix=/usr && ninja
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function clear_compiled() 
{
    rm -rf build/
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function install() 
{
    cd build && sudo ninja install
}

#--------------------------------------------------------------------------
# Delete folde .git and run git init
#--------------------------------------------------------------------------
function git_restart() 
{
    rm -rf .git && git init
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function config_all() 
{
    printf "config_all"
    #name
    #summary
    #developer_name
    #description
    #email 
    #version
    #rdnn
    #license
}


#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function config_name_app() 
{
    cd "data"
    path_appdata=$(find -type f -name '*.appdata.xml.in')
    if [ -f $path_appdata ]
    then
        name_file_appdata=`basename $path_appdata`
        old_name=$(awk -F '[<>]' '/name/{print $3}' $name_file_appdata)

        if [ -z $old_name ]; then
            tag_name="<name><\/name>"
            new_tag_name="<name>$1<\/name>"
            sed -i -e "s/$tag_name/$new_tag_name/g" $name_file_appdata            
        else
            sed -i -e "s/$old_name/$1/g" $name_file_appdata
        fi        
    fi

    path_desktop=$(find -type f -name '*.desktop.in')
    if [ -f $path_desktop ]
    then
        name_file_desktop=`basename $path_desktop`
        sed -i -e "s/Name=.*/Name=$1/g" $name_file_desktop
    fi

    cd "../debian"
    name_file_copyright="copyright"
    sed -i -e "s/Upstream-Name:.*/Upstream-Name: $1/g" $name_file_copyright

    cd ".."

    printf "$Cyan ✓ Configured application name $Color_Off $Break"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function config_name_author() 
{
    printf "config_name_author"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function config_rdnn() 
{
    file="meson.build"
    if [ -f $file ]
    then
        old_rdnn=`sed -n 1p $file | cut -f2 -d "'" | cut -f1 -d "'"`
        sed -i -e "s/$old_rdnn/$1/g" $file
    fi

    if [ -d "data" ];
    then
        cd "data"
        rdnn_change_files_data_folder $1

        if [ -d "images/icons" ];
        then
            cd "images/icons"
            rdnn_change_files_icons_folder $1
            cd "../../../../"
        else
            cd ".."
        fi
    fi

    if [ -d "debian" ];
    then
        cd "debian"
        rdnn_change_files_debian_folder $1 $old_rdnn
        cd ".."
    fi

    if [ -d "po" ];
    then
        cd "po"
        rdnn_change_files_po_folder $1
    fi

    printf "$Cyan ✓ Configured application RDNN $Color_Off $Break"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function rdnn_change_files_data_folder() 
{
    path_appdata=$(find -type f -name '*.appdata.xml.in')
    if [ -f $path_appdata ]
    then
        old_appdata=`basename $path_appdata`
        new_appdata="$1.appdata.xml.in"
        if [ "$old_appdata" != "$new_appdata" ];
        then
            mv {"$old_appdata","$new_appdata"}
            
            sed -i  "s/\//BARRA/g" $new_appdata

            name=${old_appdata%.*}
            name=${name%.*}
            name=${name%.*}
            sed -i -e "s/$name/$1/g" $new_appdata
            sed -i  "s/BARRA/\//g" $new_appdata
        fi
    fi

    path_desktop=$(find -type f -name '*.desktop.in')
    if [ -f $path_desktop ]
    then
        old_desktop=`basename $path_desktop`
        new_desktop="$1.desktop.in"
        if [ "$old_desktop" != "$new_desktop" ];
        then
            mv {"$old_desktop","$new_desktop"}

            name=${old_desktop%.*}
            name=${name%.*}
            sed -i -e "s/$name/$1/g" $new_desktop
        fi
    fi
    
    path_gresource=$(find -type f -name '*.gresource.xml')
    if [ -f $path_gresource ]
    then
        old_gresource=`basename $path_gresource`
        new_gresource="$1.gresource.xml"
        if [ "$old_gresource" != "$new_gresource" ];
        then
            mv {"$old_gresource","$new_gresource"}

            sed -i  "s/\//BARRA/g" $new_gresource

            name=${old_gresource%.*}
            name=${name%.*}
            sed -i  "s/$name/$1/g" $new_gresource
            sed -i  "s/BARRA/\//g" $new_gresource
        fi
    fi

    path_gschema=$(find -type f -name '*.gschema.xml')
    if [ -f $path_gschema ]
    then
        old_gschema=`basename $path_gschema`
        new_gschema="$1.gschema.xml"
        if [ "$old_gschema" != "$new_gschema" ]; 
        then
            mv {"$old_gschema","$new_gschema"}

            sed -i  "s/\//BARRA/g" $new_gschema

            name=${old_gschema%.*}
            name=${name%.*}
            sed -i  "s/$name/$1/g" $new_gschema
            sed -i  "s/BARRA/\//g" $new_gschema
        fi
    fi
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function rdnn_change_files_debian_folder() 
{
    new_rdnn=$1
    old_rdnn=$2

    sed -i -e "s/$old_rdnn/$new_rdnn/g" "changelog"
    sed -i -e "s/$old_rdnn/$new_rdnn/g" "control"
    sed -i -e "s/$old_rdnn/$new_rdnn/g" "rules"
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function rdnn_change_files_icons_folder() 
{    
    cd "16"

    svg_16=$(find -type f -name '*.svg')
    if [ -f $svg_16 ]
    then
        old_16_svg=`basename $svg_16`
        new_16_svg="$1.svg"

        if [ "$old_16_svg" != "$new_16_svg" ]; 
        then
            mv {"$old_16_svg","$new_16_svg"}

            sed -i  "s/\//BARRA/g" $new_16_svg

            name=${old_16_svg%.*}
            sed -i  "s/$name/$1/g" $new_16_svg
            sed -i  "s/BARRA/\//g" $new_16_svg
        fi
    fi

    cd "../24"

    svg_24=$(find -type f -name '*.svg')
    if [ -f $svg_24 ]
    then
        old_24_svg=`basename $svg_24`
        new_24_svg="$1.svg"

        if [ "$old_24_svg" != "$new_24_svg" ]; 
        then
            mv {"$old_24_svg","$new_24_svg"}

            sed -i  "s/\//BARRA/g" $new_24_svg

            name=${old_24_svg%.*}
            sed -i  "s/$name/$1/g" $new_24_svg
            sed -i  "s/BARRA/\//g" $new_24_svg
        fi
    fi

    cd "../32"

    svg_32=$(find -type f -name '*.svg')
    if [ -f $svg_32 ]
    then
        old_32_svg=`basename $svg_32`
        new_32_svg="$1.svg"

        if [ "$old_32_svg" != "$new_32_svg" ]; 
        then
            mv {"$old_32_svg","$new_32_svg"}

            sed -i  "s/\//BARRA/g" $new_32_svg

            name=${old_32_svg%.*}
            sed -i  "s/$name/$1/g" $new_32_svg
            sed -i  "s/BARRA/\//g" $new_32_svg
        fi
    fi

    cd "../48"

    svg_48=$(find -type f -name '*.svg')
    if [ -f $svg_48 ]
    then
        old_48_svg=`basename $svg_48`
        new_48_svg="$1.svg"

        if [ "$old_48_svg" != "$new_48_svg" ]; 
        then
            mv {"$old_48_svg","$new_48_svg"}

            sed -i  "s/\//BARRA/g" $new_48_svg

            name=${old_48_svg%.*}
            sed -i  "s/$name/$1/g" $new_48_svg
            sed -i  "s/BARRA/\//g" $new_48_svg
        fi
    fi

    cd "../64"

    svg_64=$(find -type f -name '*.svg')
    if [ -f $svg_64 ]
    then
        old_64_svg=`basename $svg_64`
        new_64_svg="$1.svg"

        if [ "$old_64_svg" != "$new_64_svg" ]; 
        then
            mv {"$old_64_svg","$new_64_svg"}

            sed -i  "s/\//BARRA/g" $new_64_svg

            name=${old_64_svg%.*}
            sed -i  "s/$name/$1/g" $new_64_svg
            sed -i  "s/BARRA/\//g" $new_64_svg
        fi
    fi

    cd "../128"

    svg_128=$(find -type f -name '*.svg')
    if [ -f $svg_128 ]
    then
        old_128_svg=`basename $svg_128`
        new_128_svg="$1.svg"
        
        if [ "$old_128_svg" != "$new_128_svg" ]; 
        then
            mv {"$old_128_svg","$new_128_svg"}

            sed -i  "s/\//BARRA/g" $new_128_svg

            name=${old_128_svg%.*}
            sed -i  "s/$name/$1/g" $new_128_svg
            sed -i  "s/BARRA/\//g" $new_128_svg
        fi
    fi
}

#--------------------------------------------------------------------------
# 
#--------------------------------------------------------------------------
function rdnn_change_files_po_folder() 
{
    po=$(find -type f -name '*.pot')
    if [ -f $lang ]
    then
        old_po=`basename $po`
        new_po="$1.pot"
        
        if [ "$old_po" != "$new_po" ]; 
        then
            mv {"$old_po","$new_po"}

            name=${old_po%.*}
            sed -i  "s/$name/$1/g" $new_po
        fi
    fi
}   

#--------------------------------------------------------------------------
# Run The Alvane Application
#--------------------------------------------------------------------------

# Store the number of parameters
number_parameters=$#

# Save parameters
parameters=$@

if [ "$number_parameters" -gt 0 ] 
then
    case $1 in 
        'compile')
            compile
            ;;
        'clear-compiled')
            clear_compiled
            ;;
        'install')
            app_install
            ;;
        'git:restart')
            git_restart
            ;;
        'config:all')
            config_all
            ;;
        'config:name-app')
            config_name_app "$2"
            ;;
        'config:descricao')
            printf "$1"
            ;;
        'config:rdnn')
            if [ "$number_parameters" -gt 1 ] 
            then
                config_rdnn "$2"
            else
                printf "$Red_bg You forgot to type the new RDNN $Color_Off $Break"
            fi
            ;;
        'config:license')
            printf "$1"
            ;;

        'make:config')
            make_config "$parameters"
            ;;
        'make:controller')
            make_controller "$parameters"
            ;;
        'make:custom')
            make_custom "$parameters"
            ;;
        'make:enum')
            make_enum "$parameters"
            ;;
        'make:model')
            make_model "$parameters"
            ;;
        'make:object')
            make_object "$parameters"
            ;;
        'make:util')
            make_util "$parameters"
            ;;
        'make:view')
            make_view  "$parameters"
            ;;
        'make:widget')
            make_widget "$parameters"
            ;;
        
        '--version')
            version
            ;;
        '-v')
            version
            ;;
    esac
else
    main
fi